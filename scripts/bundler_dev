#!/bin/bash
# This file runs all the necessary commands to bundle 

# Command line options:
# * sift-lowe [1]
# * sift-vlfeat [2]
# * opensurf [3]

# Second option
# * all [default] -> goes through the whole pipeline, including calculating the keys
# * copy -> copies the keyfiles from the $OPTION folder instead of calculating them
# * keys -> only extracts the keypoints for the given option
# * match -> only does the matching (with the current previous steps)
# * pmvs -> pmvs+cmvs
# * nokeys -> copies the keys then does everything else

OPTION="$1"
EXEC="$2"

if [ "$OPTION" = "" -o "$OPTION" != "1" -a "$OPTION" != "2" -a "$OPTION" != "3" -a "$OPTION" != "sift_lowe" -a "$OPTION" != "sift_vlfeat" -a "$OPTION" != "open_surf" ] ; then # user forgot an option
    printf '\nNot enough input arguments or arguments incorrect. Available options:\n * sift_lowe [1] \n * sift_vlfeat [2]\n * open_surf [3]\n\n'
    exit 
else
    #define some paths
    INSTALLS="$HOME/Installs_64"
    BUNDLER_PATH="$INSTALLS/bundler0.4-std"
    BUNDLER_BIN="$BUNDLER_PATH/bin"
    BUNDLE2PMVS="$BUNDLER_BIN/Bundle2PMVS"
    CMVS="$INSTALLS/cmvs-std/program/main"
    EXTRACT_FOCAL="$BUNDLER_BIN/extract_focal.pl"
    BUNDLER="$BUNDLER_BIN/bundler"
    SCRIPTS="$INSTALLS/scripts/scripts"
    IMAGE_DIR="."

    MATCHKEYS="$BUNDLER_BIN/KeyMatchFull" 

    #if the first option is sift-lowe or 1
    if [ "$OPTION" = "sift_lowe" ] || [ "$OPTION" = "1" ] ; then 
        OPTION="1"
        printf "\e[1;34m\n\t---------------------------\n\t  Using David Lowe's SIFT\n\t---------------------------\e[0m\n\n"
	SIFT="$BUNDLER_BIN/sift"
	FIND_FEATURES="$SCRIPTS/use_Lowe.sh $IMAGE_DIR $SIFT"
    fi

    #if the first option is sift-vlfeat or 2
    if [ "$OPTION" = "sift_vlfeat" ] || [ "$OPTION" = "2" ] ; then 
        OPTION="2"
        printf "\e[1;34m\n\t---------------------------\n\t    Using VLFEAT SIFT\n\t---------------------------\e[0m\n\n"
        SIFT="$INSTALLS/vlfeat/bin/glnxa64/sift"
        PROC_KEYS="$SCRIPTS/processKeys"
        FIND_FEATURES="$SCRIPTS/use_VLFeat.sh $IMAGE_DIR $SIFT $PROC_KEYS"
    fi

    #if the first option is opensurf or 3
    if [ "$OPTION" = "open_surf" ] || [ "$OPTION" = "3" ] ; then 
        OPTION="3"
        printf "\e[1;34m\n\t---------------------------\n\t       Using OPEN SURF\n\t---------------------------\e[0m\n\n"
        SURF="$HOME/Dropbox/Installs/OpenSURFcpp/surf"
        FIND_FEATURES="$SCRIPTS/use_OpenSurf.sh $IMAGE_DIR $SURF"
    fi
fi

if [ "$EXEC" = "" ] ; then 
    EXEC="all"
fi

if [ "$EXEC" = "copy" ] || [ "$EXEC" = "nokeys" ]  ; then  
    printf "\n\033[1mCopying previous key extraction commands....\033[0m\n"
    $SCRIPTS/copy_key $OPTION
    printf "\e[1;34mDone.\e[0m\n\n"
fi
 
if [ "$EXEC" = "keys" ] || [ "$EXEC" = "all" ] ; then  
    # create the lists of images
    printf "\n\033[1mPreprocessing and creating lists....\033[0m\n"
    $SCRIPTS/preprocess $IMAGE_DIR $EXTRACT_FOCAL
    printf "\e[1;34mDone.\e[0m\n\n"

    # generate a list of commands to extract keypoints
    printf "\033[1mGenerating the key extraction commands....\033[0m\n"
    sh $FIND_FEATURES
    printf "\e[1;34mDone.\e[0m\n\n"

    # Execute the key extraction commands
    printf "\033[1mExtracting the keypoints...\033[0m\n"
    sh keypoints.txt
    printf "\e[1;34mDone.\e[0m\n\n"
fi

if [ "$EXEC" = "match" ] || [ "$EXEC" = "all" ]  || [ "$EXEC" = "nokeys" ] ; then 
    # Match images (can take a while)
    printf "\033[1mMatching keypoints (this can take a while)...\033[0m\n"
    $SCRIPTS/match $MATCHKEYS $OPTION 
    printf "\e[1;34mDone.\e[0m\n\n"
fi
        
if [ "$EXEC" = "bund" ] || [ "$EXEC" = "pmvs" ] || [ "$EXEC" = "all" ] || [ "$EXEC" = "nokeys" ]  ; then 
    # Generate the options file for running bundler 
    printf "\033[1mRunning Bundler...\033[0m\n"
    sh $SCRIPTS/bundling $BUNDLER
    printf "\e[1;34mDone.\e[0m\n\n"
fi

if [ "$EXEC" = "pmvs" ] || [ "$EXEC" = "all" ] || [ "$EXEC" = "nokeys" ]  ; then 
    # Converting Bundler output to PMVS format
    printf "\033[1mConverting Bundler output to PMVS format...\033[0m\n"
    $SCRIPTS/pmvs $BUNDLER_BIN $BUNDLE2PMVS
    printf "\e[1;34mDone.\e[0m\n\n"

    #run cmvs and pmvs2
    printf "\033[1mRunning CMVS and PMVS2...\033[0m\n"
    $SCRIPTS/cmvs $CMVS
    printf "\e[1;34mDone.\e[0m\n\n"

    printf "\033[1mProcessing finished. Do you want to see the resulting mesh? [y/n]\033[0m\n"
    read answ
    if [ "$answ" = "y" ] ; then 
        $SCRIPTS/viewresult $OPTION
    fi
    printf "\e[1;34mDone.\e[0m\n\n"
fi

# FINAL STAGE ONLY, if you enable this you won't be able to re-use the computations
if [ "$EXEC" != "copy" ] && [ "$EXEC" != "match" ] ; then 
    printf "\033[1mDo you want to move the results to folder?\033[0m\n"
    read answ
    if [ "$answ" = "y" ] ; then 
        $SCRIPTS/moving $OPTION #$OPTION is an int
    fi
    printf "\e[1;34mDone.\e[0m\n\n"
fi

$SCRIPTS/../bclean
